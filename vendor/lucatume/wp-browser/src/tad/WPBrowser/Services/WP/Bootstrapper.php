<?php

namespace tad\WPBrowser\Services\WP;

use tad\WPBrowser\Environment\System;

/**
 * Class Bootstrapper
 *
 * Bootstraps WordPress from wp-load file and executes requests on it.
 *
 * @package tad\WPBrowser\Services\WP
 */
class Bootstrapper
{

    /**
     * @var string
     */
    protected $bootstrapScriptFilePath;

    /**
     * @var string
     */
    private $wpLoadPath;

    /**
     * @var System
     */
    private $system;

    /**
     * Bootstrapper constructor.
     *
     * @param string $wpLoadPath
     */
    public function __construct($wpLoadPath = null, System $system = null)
    {
        $this->wpLoadPath = $wpLoadPath;
        $this->bootstrapScriptFilePath = dirname(dirname(__DIR__)) . '/support/wpBootstrap.php';
        $this->system = $system ? $system : new System();
    }

    /**
     * Generates a nonce for an action for a user.
     *
     * @param string $action
     * @param array $credentials An array of credentials and cookies; usually generated by a login method.
     *
     * @return mixed
     */
    public function createNonce($action, array $credentials)
    {
        $request = [
            'action' => $action,
            'credentials' => [
                'user_login' => $credentials['username'],
                'user_password' => $credentials['password'],
                'remember' => true
            ],
            'cookies' => [
                $credentials['authCookie']->getName() => $credentials['authCookie']->getValue(),
                $credentials['loginCookie']->getName() => $credentials['loginCookie']->getValue()
            ]
        ];

        $output = $this->bootstrapWpAndExec($request);

        return !empty($output) ? $output : false;
    }

    /**
     * @param array $actions
     *
     * @return array
     */
    public function bootstrapWpAndExec(array $actions)
    {
        $command = implode(' ', [
            PHP_BINARY,
            escapeshellarg($this->bootstrapScriptFilePath),
            escapeshellarg($this->wpLoadPath),
            escapeshellarg(serialize($actions))
        ]);
        $output = $this->system->system($command);

        return $output;
    }

    public function getWpLoadPath()
    {
        return $this->wpLoadPath;
    }

    /**
     * @param string $wpLoadPath
     */
    public function setWpLoadPath($wpLoadPath)
    {
        $this->wpLoadPath = $wpLoadPath;
    }

    public function getBootstrapScriptFilePath()
    {
        return $this->bootstrapScriptFilePath;
    }

    public function setBootstrapScriptFilePath($bootsrapScriptFilePath)
    {
        $this->bootstrapScriptFilePath = $bootsrapScriptFilePath;
    }
}
